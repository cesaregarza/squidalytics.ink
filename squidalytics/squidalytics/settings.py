"""
Django settings for squidalytics project.

Generated by 'django-admin startproject' using Django 4.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import os
from pathlib import Path

from dotenv import load_dotenv

from squidalytics.env_names import (
    DJANGO_SECRET,
    POSTGRES_DB,
    POSTGRES_HOST,
    POSTGRES_PASSWORD,
    POSTGRES_PORT,
    POSTGRES_USER,
    TEST_SECRET,
)

load_dotenv()
# This should only activate when on the PythonAnywhere server
is_production = os.environ.get(TEST_SECRET) is None
if is_production:
    project_folder = os.path.expanduser("~/squidalytics")
    load_dotenv(os.path.join(project_folder, ".env"))

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False


# SECURITY WARNING: keep the secret key used in production secret!
# Get the secret key from the environment variable
SECRET_KEY = os.environ.get(DJANGO_SECRET)

ALLOWED_HOSTS = [
    "squidalytics.ink",
    "127.0.0.1",
    "localhost",
    "53d6-107-211-228-55.ngrok-free.app",
]

CSRF_TRUSTED_ORIGINS = ["https://squidalytics.ink"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "wagtail.contrib.forms",
    "wagtail.contrib.redirects",
    "wagtail.embeds",
    "wagtail.sites",
    "wagtail.users",
    "wagtail.snippets",
    "wagtail.documents",
    "wagtail.images",
    "wagtail.search",
    "wagtail.admin",
    "wagtail",
    "modelcluster",
    "taggit",
    "wagtailcodeblock",
    "wagtailmarkdown",
    "wagtailmedia",
    "landing",
    "articles",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "wagtail.contrib.redirects.middleware.RedirectMiddleware",
]

ROOT_URLCONF = "squidalytics.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "squidalytics.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get(POSTGRES_DB),
        "USER": os.environ.get(POSTGRES_USER),
        "PASSWORD": os.environ.get(POSTGRES_PASSWORD),
        "HOST": os.environ.get(POSTGRES_HOST),
        "PORT": os.environ.get(POSTGRES_PORT),
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# default static files settings for PythonAnywhere.
# see https://help.pythonanywhere.com/pages/DjangoStaticFiles for more info
if is_production and DEBUG is False:
    MEDIA_ROOT = "/home/cegarza/squidalytics/media"
    STATIC_ROOT = "/home/cegarza/squidalytics/static"
elif is_production and DEBUG is True:
    raise ValueError("DEBUG cannot be True on production")
elif not is_production and DEBUG is True:
    STATICFILES_DIRS = [BASE_DIR / "static"]
elif not is_production and DEBUG is False:
    STATIC_ROOT = BASE_DIR / "static"
    MEDIA_ROOT = BASE_DIR / "media"
else:
    raise ValueError("This should never happen")
MEDIA_URL = "/media/"
STATIC_URL = "/static/"


# LOGGING
LOG_LEVEL = "WARNING" if is_production else "INFO"
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": LOG_LEVEL,
        },
        "webhook_handler": {
            "handlers": ["console"],
            "level": LOG_LEVEL,
        },
    },
}

# Wagtail settings
WAGTAIL_SITE_NAME = "squidalytics.ink"
WAGTAILADMIN_BASE_URL = "/cms/"
WAGTAIL_CODE_BLOCK_LANGUAGES = (
    ("bash", "Bash/Shell"),
    ("json", "JSON"),
    ("python", "Python"),
    ("yaml", "YAML"),
)
WAGTAIL_CODE_BLOCK_THEME = "twilight"
WAGTAIL_CODE_BLOCK_LINE_NUMBERS = True

# Markdown settings
WAGTAILMARKDOWN = {
    "extensions": ["extensions.markdown_ability_tag:AbilityExtension"],
}

# Wagtailmedia settings
# WAGTAILMEDIA = {
#     "MEDIA_MODEL": "",  # string, dotted-notation. Defaults to "wagtailmedia.Media"
#     "MEDIA_FORM_BASE": "",  # string, dotted-notation. Defaults to an empty string
#     "AUDIO_EXTENSIONS": [],  # list of extensions
#     "VIDEO_EXTENSIONS": [],  # list of extensions
# }
